{
  "cells": [
    {
      "metadata": {
        "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
        "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
        "trusted": true,
        "collapsed": true
      },
      "cell_type": "code",
      "source": "# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"../input/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"../input\"))\n\n# Any results you write to the current directory are saved as output.",
      "execution_count": 1,
      "outputs": []
    },
    {
      "metadata": {
        "trusted": true,
        "_uuid": "6cf3eaad18e5a027c423da7ae5865060331dc678",
        "collapsed": true
      },
      "cell_type": "code",
      "source": "#Dummy Dataset\nX = np.array([[0,0,1],\n             [0,1,1],\n             [1,0,1],\n             [1,1,1]])\nY = np.array([0,0,1,1]).T",
      "execution_count": 2,
      "outputs": []
    },
    {
      "metadata": {
        "trusted": true,
        "_uuid": "ef2a3aeb15a24b1a61aa521fb0136907c2719ed6"
      },
      "cell_type": "code",
      "source": "import numpy as np\n\n# sigmoid function - \ndef nonlinear(x,deriv=False):\n    #this calculates the derivative of the sigmoid. remember (a(1-a)) is the dy/dx of sigmoid\n    if(deriv==True):\n        return x*(1-x)\n    return 1/(1+np.exp(-x))\n    \n# input dataset - each row is a training example, each column pairs to the input nodes\nX = np.array([  [0,0,1],\n                [0,1,1],\n                [1,0,1],\n                [1,1,1] ])\nprint(\"Input data set\")\nprint(X)\n\n# output dataset            \ny = np.array([[0,0,1,1]]).T\n\n# seed random numbers to make calculation\n# deterministic (just a good practice)\nnp.random.seed(1)\n\n# initialize weights randomly with mean 0\nweights0 = 2*np.random.random((3,1)) - 1\n\nfor iter in range(10000):\n\n    # forward propagation\n    layer0 = X\n    layer1 = nonlinear(np.dot(l0,weights0))\n\n    # how much did we miss?\n    layer1_error = y - layer1\n\n    # multiply how much we missed by the \n    # slope of the sigmoid at the values in l1 - elementwise multiplication\n    layer1_delta = layer1_error * nonlinear(layer1,True)\n\n    # update weights: weight_update = input_value * l1_delta\n    weights0 += np.dot(layer0.T,layer1_delta)\n\nprint (\"Output After Training:\")\nprint (layer1)",
      "execution_count": 6,
      "outputs": [
        {
          "output_type": "stream",
          "text": "Input data set\n[[0 0 1]\n [0 1 1]\n [1 0 1]\n [1 1 1]]\nOutput After Training:\n[[0.00966449]\n [0.00786506]\n [0.99358898]\n [0.99211957]]\n",
          "name": "stdout"
        }
      ]
    },
    {
      "metadata": {
        "_uuid": "b8a3cedb22bbf2f318a392d596c8d2bae8b390ca"
      },
      "cell_type": "markdown",
      "source": "**3 Layer Neural Network**"
    },
    {
      "metadata": {
        "trusted": true,
        "_uuid": "5fe62dd134351be6395a94f7415c76ca98d7b4a6",
        "collapsed": true
      },
      "cell_type": "code",
      "source": "def nonlinear(x, deriv=False):\n    if(deriv == True):\n        return x*(1-x)\n    return 1/(1+np.exp(-x))\n\nX = np.array([[0,0,1],\n             [0,1,1],\n             [1,0,1],\n             [1,1,1]])\n\nY = np.array([[0],\n            [1],\n            [1],\n            [0]])\n\nnp.random.seed(1)\n\n#Randomly initialise some weights\nweights0 = 2*np.random.random((3,4)) - 1\nweights1 = 2*np.random.random((4,1)) - 1\n\nfor j in range(100000):\n    #Feed forward\n    layer0 = X\n    layer1 = nonlinear(np.dot(layer0,weights0))\n    layer2 = nonlinear(np.dot(layer1,weights1))\n    \n    #Error at output layer\n    layer2_error = y - layer2\n    \n    if(j%10000) == 0:\n        print(\"Error:\", str(np.mean(np.abs(layer2_error))))\n    \n    #The error at nodes at layer 2\n    layer2_delta = layer2_error * nonlinear(layer2,deriv=True)\n    \n    #The error at nodes at layer 1 - how much did layer 1 contribute to layer 2 error\n    layer1_error = layer2_delta.dot(weights1.T)\n    \n    #In what direction is the desired layer 1 value?\n    layer1_delta = layer1_error * nonlinear(layer1,deriv=True)\n    \n    #update weights at each layer\n    weights0 += layer0.T.dot(layer1_delta)\n    weights1 += layer1.T.dot(layer2_delta)\n    \n\n    \n    ",
      "execution_count": null,
      "outputs": []
    }
  ],
  "metadata": {
    "kernelspec": {
      "display_name": "Python 3",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "name": "python",
      "version": "3.6.4",
      "mimetype": "text/x-python",
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "pygments_lexer": "ipython3",
      "nbconvert_exporter": "python",
      "file_extension": ".py"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 1
}